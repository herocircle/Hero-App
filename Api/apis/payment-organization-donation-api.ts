/* tslint:disable */
/* eslint-disable */
/**
 * hero-circle-api
 * The Hero Circle API description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateOrganizationDonationRequestDto } from '../models';
import { MobilizerShare } from '../models';
import { OrganizationDonation } from '../models';
import { OrganizationDonationPaymentInstallment } from '../models';
/**
 * PaymentOrganizationDonationApi - axios parameter creator
 * @export
 */
export const PaymentOrganizationDonationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an organization donation
         * @param {CreateOrganizationDonationRequestDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body: CreateOrganizationDonationRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/organization-donation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all organization donations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization-donation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findOneById.');
            }
            const localVarPath = `/organization-donation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the authenticated organization's current donation summary
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCircleSubscriptions: async (date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling getAllCircleSubscriptions.');
            }
            const localVarPath = `/organization-donation/my-summary`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} [date] The date to filter the summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSummaries: async (date?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization-donation/all-summaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Date} [date] The date to filter the summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMobilizerOrganizationPayout: async (date?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization-donation/mobilizer-organization-payout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Date} [date] The date to filter the summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMobilizerOrganizationPayoutCsv: async (date?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization-donation/mobilizer-organization-payout-csv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an organization donation by id
         * @param {string} id The id of the organization donation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling remove.');
            }
            const localVarPath = `/organization-donation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an organization donation by id
         * @param {CreateOrganizationDonationRequestDto} body The organization donation data
         * @param {string} id The id of the organization donation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (body: CreateOrganizationDonationRequestDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling update.');
            }
            const localVarPath = `/organization-donation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentOrganizationDonationApi - functional programming interface
 * @export
 */
export const PaymentOrganizationDonationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an organization donation
         * @param {CreateOrganizationDonationRequestDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body: CreateOrganizationDonationRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationDonation>>> {
            const localVarAxiosArgs = await PaymentOrganizationDonationApiAxiosParamCreator(configuration).create(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all organization donations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<OrganizationDonation>>>> {
            const localVarAxiosArgs = await PaymentOrganizationDonationApiAxiosParamCreator(configuration).findAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationDonation>>> {
            const localVarAxiosArgs = await PaymentOrganizationDonationApiAxiosParamCreator(configuration).findOneById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the authenticated organization's current donation summary
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCircleSubscriptions(date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<OrganizationDonationPaymentInstallment>>>> {
            const localVarAxiosArgs = await PaymentOrganizationDonationApiAxiosParamCreator(configuration).getAllCircleSubscriptions(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} [date] The date to filter the summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSummaries(date?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentOrganizationDonationApiAxiosParamCreator(configuration).getAllSummaries(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Date} [date] The date to filter the summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMobilizerOrganizationPayout(date?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MobilizerShare>>>> {
            const localVarAxiosArgs = await PaymentOrganizationDonationApiAxiosParamCreator(configuration).getMobilizerOrganizationPayout(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Date} [date] The date to filter the summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMobilizerOrganizationPayoutCsv(date?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentOrganizationDonationApiAxiosParamCreator(configuration).getMobilizerOrganizationPayoutCsv(date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete an organization donation by id
         * @param {string} id The id of the organization donation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationDonation>>> {
            const localVarAxiosArgs = await PaymentOrganizationDonationApiAxiosParamCreator(configuration).remove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update an organization donation by id
         * @param {CreateOrganizationDonationRequestDto} body The organization donation data
         * @param {string} id The id of the organization donation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(body: CreateOrganizationDonationRequestDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationDonation>>> {
            const localVarAxiosArgs = await PaymentOrganizationDonationApiAxiosParamCreator(configuration).update(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PaymentOrganizationDonationApi - factory interface
 * @export
 */
export const PaymentOrganizationDonationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create an organization donation
         * @param {CreateOrganizationDonationRequestDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body: CreateOrganizationDonationRequestDto, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationDonation>> {
            return PaymentOrganizationDonationApiFp(configuration).create(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all organization donations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<OrganizationDonation>>> {
            return PaymentOrganizationDonationApiFp(configuration).findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneById(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationDonation>> {
            return PaymentOrganizationDonationApiFp(configuration).findOneById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the authenticated organization's current donation summary
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCircleSubscriptions(date: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<OrganizationDonationPaymentInstallment>>> {
            return PaymentOrganizationDonationApiFp(configuration).getAllCircleSubscriptions(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} [date] The date to filter the summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSummaries(date?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentOrganizationDonationApiFp(configuration).getAllSummaries(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Date} [date] The date to filter the summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMobilizerOrganizationPayout(date?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MobilizerShare>>> {
            return PaymentOrganizationDonationApiFp(configuration).getMobilizerOrganizationPayout(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Date} [date] The date to filter the summaries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMobilizerOrganizationPayoutCsv(date?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentOrganizationDonationApiFp(configuration).getMobilizerOrganizationPayoutCsv(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an organization donation by id
         * @param {string} id The id of the organization donation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationDonation>> {
            return PaymentOrganizationDonationApiFp(configuration).remove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an organization donation by id
         * @param {CreateOrganizationDonationRequestDto} body The organization donation data
         * @param {string} id The id of the organization donation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(body: CreateOrganizationDonationRequestDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationDonation>> {
            return PaymentOrganizationDonationApiFp(configuration).update(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentOrganizationDonationApi - object-oriented interface
 * @export
 * @class PaymentOrganizationDonationApi
 * @extends {BaseAPI}
 */
export class PaymentOrganizationDonationApi extends BaseAPI {
    /**
     * 
     * @summary Create an organization donation
     * @param {CreateOrganizationDonationRequestDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentOrganizationDonationApi
     */
    public async create(body: CreateOrganizationDonationRequestDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationDonation>> {
        return PaymentOrganizationDonationApiFp(this.configuration).create(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all organization donations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentOrganizationDonationApi
     */
    public async findAll(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<OrganizationDonation>>> {
        return PaymentOrganizationDonationApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentOrganizationDonationApi
     */
    public async findOneById(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationDonation>> {
        return PaymentOrganizationDonationApiFp(this.configuration).findOneById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the authenticated organization's current donation summary
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentOrganizationDonationApi
     */
    public async getAllCircleSubscriptions(date: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<OrganizationDonationPaymentInstallment>>> {
        return PaymentOrganizationDonationApiFp(this.configuration).getAllCircleSubscriptions(date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {any} [date] The date to filter the summaries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentOrganizationDonationApi
     */
    public async getAllSummaries(date?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentOrganizationDonationApiFp(this.configuration).getAllSummaries(date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Date} [date] The date to filter the summaries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentOrganizationDonationApi
     */
    public async getMobilizerOrganizationPayout(date?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MobilizerShare>>> {
        return PaymentOrganizationDonationApiFp(this.configuration).getMobilizerOrganizationPayout(date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Date} [date] The date to filter the summaries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentOrganizationDonationApi
     */
    public async getMobilizerOrganizationPayoutCsv(date?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentOrganizationDonationApiFp(this.configuration).getMobilizerOrganizationPayoutCsv(date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete an organization donation by id
     * @param {string} id The id of the organization donation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentOrganizationDonationApi
     */
    public async remove(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationDonation>> {
        return PaymentOrganizationDonationApiFp(this.configuration).remove(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update an organization donation by id
     * @param {CreateOrganizationDonationRequestDto} body The organization donation data
     * @param {string} id The id of the organization donation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentOrganizationDonationApi
     */
    public async update(body: CreateOrganizationDonationRequestDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationDonation>> {
        return PaymentOrganizationDonationApiFp(this.configuration).update(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
