/* tslint:disable */
/* eslint-disable */
/**
 * hero-circle-api
 * The Hero Circle API description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Story } from '../models';
import { UpdateimageIdBody } from '../models';
/**
 * StoryApi - axios parameter creator
 * @export
 */
export const StoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling _delete.');
            }
            const localVarPath = `/story/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Blob} photo 
         * @param {Blob} cover 
         * @param {Date} date 
         * @param {string} title 
         * @param {string} writer 
         * @param {string} description 
         * @param {string} subTitle 
         * @param {string} text1 
         * @param {string} text2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStoryForm: async (photo: Blob, cover: Blob, date: Date, title: string, writer: string, description: string, subTitle: string, text1: string, text2: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'photo' is not null or undefined
            if (photo === null || photo === undefined) {
                throw new RequiredError('photo','Required parameter photo was null or undefined when calling createStoryForm.');
            }
            // verify required parameter 'cover' is not null or undefined
            if (cover === null || cover === undefined) {
                throw new RequiredError('cover','Required parameter cover was null or undefined when calling createStoryForm.');
            }
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling createStoryForm.');
            }
            // verify required parameter 'title' is not null or undefined
            if (title === null || title === undefined) {
                throw new RequiredError('title','Required parameter title was null or undefined when calling createStoryForm.');
            }
            // verify required parameter 'writer' is not null or undefined
            if (writer === null || writer === undefined) {
                throw new RequiredError('writer','Required parameter writer was null or undefined when calling createStoryForm.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling createStoryForm.');
            }
            // verify required parameter 'subTitle' is not null or undefined
            if (subTitle === null || subTitle === undefined) {
                throw new RequiredError('subTitle','Required parameter subTitle was null or undefined when calling createStoryForm.');
            }
            // verify required parameter 'text1' is not null or undefined
            if (text1 === null || text1 === undefined) {
                throw new RequiredError('text1','Required parameter text1 was null or undefined when calling createStoryForm.');
            }
            // verify required parameter 'text2' is not null or undefined
            if (text2 === null || text2 === undefined) {
                throw new RequiredError('text2','Required parameter text2 was null or undefined when calling createStoryForm.');
            }
            const localVarPath = `/story`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }

            if (cover !== undefined) { 
                localVarFormParams.append('cover', cover as any);
            }

            if (date !== undefined) { 
                localVarFormParams.append('date', date as any);
            }

            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }

            if (writer !== undefined) { 
                localVarFormParams.append('writer', writer as any);
            }

            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }

            if (subTitle !== undefined) { 
                localVarFormParams.append('subTitle', subTitle as any);
            }

            if (text1 !== undefined) { 
                localVarFormParams.append('text1', text1 as any);
            }

            if (text2 !== undefined) { 
                localVarFormParams.append('text2', text2 as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findStoryById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findStoryById.');
            }
            const localVarPath = `/story/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/story`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateimageIdBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImage: async (id: string, body?: UpdateimageIdBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateImage.');
            }
            const localVarPath = `/story/update-image/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Blob} photo 
         * @param {Blob} cover 
         * @param {Date} date 
         * @param {string} title 
         * @param {string} writer 
         * @param {string} description 
         * @param {string} subTitle 
         * @param {string} text1 
         * @param {string} text2 
         * @param {string} videoUrl 
         * @param {Blob} videoFile 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStoryForm: async (photo: Blob, cover: Blob, date: Date, title: string, writer: string, description: string, subTitle: string, text1: string, text2: string, videoUrl: string, videoFile: Blob, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'photo' is not null or undefined
            if (photo === null || photo === undefined) {
                throw new RequiredError('photo','Required parameter photo was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'cover' is not null or undefined
            if (cover === null || cover === undefined) {
                throw new RequiredError('cover','Required parameter cover was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'title' is not null or undefined
            if (title === null || title === undefined) {
                throw new RequiredError('title','Required parameter title was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'writer' is not null or undefined
            if (writer === null || writer === undefined) {
                throw new RequiredError('writer','Required parameter writer was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'subTitle' is not null or undefined
            if (subTitle === null || subTitle === undefined) {
                throw new RequiredError('subTitle','Required parameter subTitle was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'text1' is not null or undefined
            if (text1 === null || text1 === undefined) {
                throw new RequiredError('text1','Required parameter text1 was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'text2' is not null or undefined
            if (text2 === null || text2 === undefined) {
                throw new RequiredError('text2','Required parameter text2 was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'videoUrl' is not null or undefined
            if (videoUrl === null || videoUrl === undefined) {
                throw new RequiredError('videoUrl','Required parameter videoUrl was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'videoFile' is not null or undefined
            if (videoFile === null || videoFile === undefined) {
                throw new RequiredError('videoFile','Required parameter videoFile was null or undefined when calling updateStoryForm.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateStoryForm.');
            }
            const localVarPath = `/story/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }

            if (cover !== undefined) { 
                localVarFormParams.append('cover', cover as any);
            }

            if (date !== undefined) { 
                localVarFormParams.append('date', date as any);
            }

            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }

            if (writer !== undefined) { 
                localVarFormParams.append('writer', writer as any);
            }

            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }

            if (subTitle !== undefined) { 
                localVarFormParams.append('subTitle', subTitle as any);
            }

            if (text1 !== undefined) { 
                localVarFormParams.append('text1', text1 as any);
            }

            if (text2 !== undefined) { 
                localVarFormParams.append('text2', text2 as any);
            }

            if (videoUrl !== undefined) { 
                localVarFormParams.append('videoUrl', videoUrl as any);
            }

            if (videoFile !== undefined) { 
                localVarFormParams.append('videoFile', videoFile as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoryApi - functional programming interface
 * @export
 */
export const StoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Story>>> {
            const localVarAxiosArgs = await StoryApiAxiosParamCreator(configuration)._delete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Blob} photo 
         * @param {Blob} cover 
         * @param {Date} date 
         * @param {string} title 
         * @param {string} writer 
         * @param {string} description 
         * @param {string} subTitle 
         * @param {string} text1 
         * @param {string} text2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStoryForm(photo: Blob, cover: Blob, date: Date, title: string, writer: string, description: string, subTitle: string, text1: string, text2: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Story>>> {
            const localVarAxiosArgs = await StoryApiAxiosParamCreator(configuration).createStoryForm(photo, cover, date, title, writer, description, subTitle, text1, text2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findStoryById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Story>>> {
            const localVarAxiosArgs = await StoryApiAxiosParamCreator(configuration).findStoryById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Story>>>> {
            const localVarAxiosArgs = await StoryApiAxiosParamCreator(configuration).getStories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateimageIdBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImage(id: string, body?: UpdateimageIdBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Story>>> {
            const localVarAxiosArgs = await StoryApiAxiosParamCreator(configuration).updateImage(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Blob} photo 
         * @param {Blob} cover 
         * @param {Date} date 
         * @param {string} title 
         * @param {string} writer 
         * @param {string} description 
         * @param {string} subTitle 
         * @param {string} text1 
         * @param {string} text2 
         * @param {string} videoUrl 
         * @param {Blob} videoFile 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStoryForm(photo: Blob, cover: Blob, date: Date, title: string, writer: string, description: string, subTitle: string, text1: string, text2: string, videoUrl: string, videoFile: Blob, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Story>>> {
            const localVarAxiosArgs = await StoryApiAxiosParamCreator(configuration).updateStoryForm(photo, cover, date, title, writer, description, subTitle, text1, text2, videoUrl, videoFile, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StoryApi - factory interface
 * @export
 */
export const StoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Story>> {
            return StoryApiFp(configuration)._delete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Blob} photo 
         * @param {Blob} cover 
         * @param {Date} date 
         * @param {string} title 
         * @param {string} writer 
         * @param {string} description 
         * @param {string} subTitle 
         * @param {string} text1 
         * @param {string} text2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStoryForm(photo: Blob, cover: Blob, date: Date, title: string, writer: string, description: string, subTitle: string, text1: string, text2: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Story>> {
            return StoryApiFp(configuration).createStoryForm(photo, cover, date, title, writer, description, subTitle, text1, text2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findStoryById(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Story>> {
            return StoryApiFp(configuration).findStoryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStories(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Story>>> {
            return StoryApiFp(configuration).getStories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateimageIdBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImage(id: string, body?: UpdateimageIdBody, options?: AxiosRequestConfig): Promise<AxiosResponse<Story>> {
            return StoryApiFp(configuration).updateImage(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Blob} photo 
         * @param {Blob} cover 
         * @param {Date} date 
         * @param {string} title 
         * @param {string} writer 
         * @param {string} description 
         * @param {string} subTitle 
         * @param {string} text1 
         * @param {string} text2 
         * @param {string} videoUrl 
         * @param {Blob} videoFile 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStoryForm(photo: Blob, cover: Blob, date: Date, title: string, writer: string, description: string, subTitle: string, text1: string, text2: string, videoUrl: string, videoFile: Blob, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Story>> {
            return StoryApiFp(configuration).updateStoryForm(photo, cover, date, title, writer, description, subTitle, text1, text2, videoUrl, videoFile, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoryApi - object-oriented interface
 * @export
 * @class StoryApi
 * @extends {BaseAPI}
 */
export class StoryApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public async _delete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Story>> {
        return StoryApiFp(this.configuration)._delete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Blob} photo 
     * @param {Blob} cover 
     * @param {Date} date 
     * @param {string} title 
     * @param {string} writer 
     * @param {string} description 
     * @param {string} subTitle 
     * @param {string} text1 
     * @param {string} text2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public async createStoryForm(photo: Blob, cover: Blob, date: Date, title: string, writer: string, description: string, subTitle: string, text1: string, text2: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Story>> {
        return StoryApiFp(this.configuration).createStoryForm(photo, cover, date, title, writer, description, subTitle, text1, text2, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public async findStoryById(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Story>> {
        return StoryApiFp(this.configuration).findStoryById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public async getStories(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Story>>> {
        return StoryApiFp(this.configuration).getStories(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {UpdateimageIdBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public async updateImage(id: string, body?: UpdateimageIdBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<Story>> {
        return StoryApiFp(this.configuration).updateImage(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Blob} photo 
     * @param {Blob} cover 
     * @param {Date} date 
     * @param {string} title 
     * @param {string} writer 
     * @param {string} description 
     * @param {string} subTitle 
     * @param {string} text1 
     * @param {string} text2 
     * @param {string} videoUrl 
     * @param {Blob} videoFile 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public async updateStoryForm(photo: Blob, cover: Blob, date: Date, title: string, writer: string, description: string, subTitle: string, text1: string, text2: string, videoUrl: string, videoFile: Blob, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Story>> {
        return StoryApiFp(this.configuration).updateStoryForm(photo, cover, date, title, writer, description, subTitle, text1, text2, videoUrl, videoFile, id, options).then((request) => request(this.axios, this.basePath));
    }
}
