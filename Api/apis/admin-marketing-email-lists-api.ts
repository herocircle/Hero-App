/* tslint:disable */
/* eslint-disable */
/**
 * hero-circle-api
 * The Hero Circle API description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ListDetails } from '../models';
import { ListSummary } from '../models';
/**
 * AdminMarketingEmailListsApi - axios parameter creator
 * @export
 */
export const AdminMarketingEmailListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Email list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteList: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteList.');
            }
            const localVarPath = `/email-lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get summaries for all email lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLists: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/email-lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details for a specific predefined email list
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListDetails: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getListDetails.');
            }
            const localVarPath = `/email-lists/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import a CSV file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importCsv: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/email-lists/import-csv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminMarketingEmailListsApi - functional programming interface
 * @export
 */
export const AdminMarketingEmailListsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Email list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteList(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AdminMarketingEmailListsApiAxiosParamCreator(configuration).deleteList(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get summaries for all email lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLists(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ListSummary>>>> {
            const localVarAxiosArgs = await AdminMarketingEmailListsApiAxiosParamCreator(configuration).getAllLists(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get details for a specific predefined email list
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListDetails(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ListDetails>>> {
            const localVarAxiosArgs = await AdminMarketingEmailListsApiAxiosParamCreator(configuration).getListDetails(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Import a CSV file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importCsv(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ListSummary>>> {
            const localVarAxiosArgs = await AdminMarketingEmailListsApiAxiosParamCreator(configuration).importCsv(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminMarketingEmailListsApi - factory interface
 * @export
 */
export const AdminMarketingEmailListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete Email list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteList(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AdminMarketingEmailListsApiFp(configuration).deleteList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get summaries for all email lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLists(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ListSummary>>> {
            return AdminMarketingEmailListsApiFp(configuration).getAllLists(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details for a specific predefined email list
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListDetails(name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ListDetails>> {
            return AdminMarketingEmailListsApiFp(configuration).getListDetails(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import a CSV file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importCsv(options?: AxiosRequestConfig): Promise<AxiosResponse<ListSummary>> {
            return AdminMarketingEmailListsApiFp(configuration).importCsv(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminMarketingEmailListsApi - object-oriented interface
 * @export
 * @class AdminMarketingEmailListsApi
 * @extends {BaseAPI}
 */
export class AdminMarketingEmailListsApi extends BaseAPI {
    /**
     * 
     * @summary Delete Email list
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminMarketingEmailListsApi
     */
    public async deleteList(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AdminMarketingEmailListsApiFp(this.configuration).deleteList(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get summaries for all email lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminMarketingEmailListsApi
     */
    public async getAllLists(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ListSummary>>> {
        return AdminMarketingEmailListsApiFp(this.configuration).getAllLists(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get details for a specific predefined email list
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminMarketingEmailListsApi
     */
    public async getListDetails(name: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ListDetails>> {
        return AdminMarketingEmailListsApiFp(this.configuration).getListDetails(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Import a CSV file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminMarketingEmailListsApi
     */
    public async importCsv(options?: AxiosRequestConfig) : Promise<AxiosResponse<ListSummary>> {
        return AdminMarketingEmailListsApiFp(this.configuration).importCsv(options).then((request) => request(this.axios, this.basePath));
    }
}
