/* tslint:disable */
/* eslint-disable */
/**
 * hero-circle-api
 * The Hero Circle API description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Victory } from '../models';
import { VictoryDto } from '../models';
/**
 * CircleVictoriesApi - axios parameter creator
 * @export
 */
export const CircleVictoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VictoryDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVictory: async (body: VictoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addVictory.');
            }
            const localVarPath = `/victories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVictory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteVictory.');
            }
            const localVarPath = `/victories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVictories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/victories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get mobilizer victories
         * @param {string} mobilizerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMobilizerVictories: async (mobilizerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mobilizerId' is not null or undefined
            if (mobilizerId === null || mobilizerId === undefined) {
                throw new RequiredError('mobilizerId','Required parameter mobilizerId was null or undefined when calling getMobilizerVictories.');
            }
            const localVarPath = `/victories/mobilizers/{mobilizerId}`
                .replace(`{${"mobilizerId"}}`, encodeURIComponent(String(mobilizerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get My Victory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyVictory: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/victories/mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupporterVictories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/victories/supporter-victories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserVictoriesBySubscription: async (id: string, date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserVictoriesBySubscription.');
            }
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling getUserVictoriesBySubscription.');
            }
            const localVarPath = `/victories/user/{id}/{date}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVictoriesByCircleId: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling getVictoriesByCircleId.');
            }
            const localVarPath = `/victories/multiple/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} mobilizerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVictoriesByMobilizerAndCircleId: async (id: string, mobilizerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getVictoriesByMobilizerAndCircleId.');
            }
            // verify required parameter 'mobilizerId' is not null or undefined
            if (mobilizerId === null || mobilizerId === undefined) {
                throw new RequiredError('mobilizerId','Required parameter mobilizerId was null or undefined when calling getVictoriesByMobilizerAndCircleId.');
            }
            const localVarPath = `/victories/circle/{id}/mobilizer/{mobilizerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"mobilizerId"}}`, encodeURIComponent(String(mobilizerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user Victories
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVictoriesByUserName: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getVictoriesByUserName.');
            }
            const localVarPath = `/victories/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} victory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVictoryById: async (victory: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'victory' is not null or undefined
            if (victory === null || victory === undefined) {
                throw new RequiredError('victory','Required parameter victory was null or undefined when calling getVictoryById.');
            }
            const localVarPath = `/victories/single/{victory}`
                .replace(`{${"victory"}}`, encodeURIComponent(String(victory)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} victoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinVictory: async (victoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'victoryId' is not null or undefined
            if (victoryId === null || victoryId === undefined) {
                throw new RequiredError('victoryId','Required parameter victoryId was null or undefined when calling pinVictory.');
            }
            const localVarPath = `/victories/pin/{victoryId}`
                .replace(`{${"victoryId"}}`, encodeURIComponent(String(victoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VictoryDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVictory: async (body: VictoryDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateVictory.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateVictory.');
            }
            const localVarPath = `/victories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<Blob>} files 
         * @param {string} victoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVictoryFilesForm: async (files: Array<Blob>, victoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'files' is not null or undefined
            if (files === null || files === undefined) {
                throw new RequiredError('files','Required parameter files was null or undefined when calling uploadVictoryFilesForm.');
            }
            // verify required parameter 'victoryId' is not null or undefined
            if (victoryId === null || victoryId === undefined) {
                throw new RequiredError('victoryId','Required parameter victoryId was null or undefined when calling uploadVictoryFilesForm.');
            }
            const localVarPath = `/victories/images/{victoryId}`
                .replace(`{${"victoryId"}}`, encodeURIComponent(String(victoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<Blob>} video 
         * @param {string} victoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVictoryVideoForm: async (video: Array<Blob>, victoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'video' is not null or undefined
            if (video === null || video === undefined) {
                throw new RequiredError('video','Required parameter video was null or undefined when calling uploadVictoryVideoForm.');
            }
            // verify required parameter 'victoryId' is not null or undefined
            if (victoryId === null || victoryId === undefined) {
                throw new RequiredError('victoryId','Required parameter victoryId was null or undefined when calling uploadVictoryVideoForm.');
            }
            const localVarPath = `/victories/video/{victoryId}`
                .replace(`{${"victoryId"}}`, encodeURIComponent(String(victoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (video) {
                video.forEach((element) => {
                    localVarFormParams.append('video', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CircleVictoriesApi - functional programming interface
 * @export
 */
export const CircleVictoriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VictoryDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVictory(body: VictoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Victory>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).addVictory(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVictory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Victory>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).deleteVictory(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVictories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Victory>>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).getAllVictories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get mobilizer victories
         * @param {string} mobilizerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMobilizerVictories(mobilizerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Victory>>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).getMobilizerVictories(mobilizerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get My Victory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyVictory(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Victory>>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).getMyVictory(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupporterVictories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Victory>>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).getSupporterVictories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserVictoriesBySubscription(id: string, date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Victory>>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).getUserVictoriesBySubscription(id, date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVictoriesByCircleId(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Victory>>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).getVictoriesByCircleId(slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} mobilizerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVictoriesByMobilizerAndCircleId(id: string, mobilizerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Victory>>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).getVictoriesByMobilizerAndCircleId(id, mobilizerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get user Victories
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVictoriesByUserName(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Victory>>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).getVictoriesByUserName(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} victory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVictoryById(victory: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Victory>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).getVictoryById(victory, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} victoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinVictory(victoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).pinVictory(victoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {VictoryDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVictory(body: VictoryDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Victory>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).updateVictory(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array<Blob>} files 
         * @param {string} victoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadVictoryFilesForm(files: Array<Blob>, victoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Victory>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).uploadVictoryFilesForm(files, victoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array<Blob>} video 
         * @param {string} victoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadVictoryVideoForm(video: Array<Blob>, victoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Victory>>> {
            const localVarAxiosArgs = await CircleVictoriesApiAxiosParamCreator(configuration).uploadVictoryVideoForm(video, victoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CircleVictoriesApi - factory interface
 * @export
 */
export const CircleVictoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {VictoryDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVictory(body: VictoryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Victory>> {
            return CircleVictoriesApiFp(configuration).addVictory(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVictory(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Victory>> {
            return CircleVictoriesApiFp(configuration).deleteVictory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVictories(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Victory>>> {
            return CircleVictoriesApiFp(configuration).getAllVictories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get mobilizer victories
         * @param {string} mobilizerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMobilizerVictories(mobilizerId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Victory>>> {
            return CircleVictoriesApiFp(configuration).getMobilizerVictories(mobilizerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get My Victory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyVictory(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Victory>>> {
            return CircleVictoriesApiFp(configuration).getMyVictory(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupporterVictories(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Victory>>> {
            return CircleVictoriesApiFp(configuration).getSupporterVictories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserVictoriesBySubscription(id: string, date: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Victory>>> {
            return CircleVictoriesApiFp(configuration).getUserVictoriesBySubscription(id, date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVictoriesByCircleId(slug: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Victory>>> {
            return CircleVictoriesApiFp(configuration).getVictoriesByCircleId(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} mobilizerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVictoriesByMobilizerAndCircleId(id: string, mobilizerId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Victory>>> {
            return CircleVictoriesApiFp(configuration).getVictoriesByMobilizerAndCircleId(id, mobilizerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user Victories
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVictoriesByUserName(username: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Victory>>> {
            return CircleVictoriesApiFp(configuration).getVictoriesByUserName(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} victory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVictoryById(victory: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Victory>> {
            return CircleVictoriesApiFp(configuration).getVictoryById(victory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} victoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinVictory(victoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CircleVictoriesApiFp(configuration).pinVictory(victoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VictoryDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVictory(body: VictoryDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Victory>> {
            return CircleVictoriesApiFp(configuration).updateVictory(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<Blob>} files 
         * @param {string} victoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadVictoryFilesForm(files: Array<Blob>, victoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Victory>> {
            return CircleVictoriesApiFp(configuration).uploadVictoryFilesForm(files, victoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<Blob>} video 
         * @param {string} victoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadVictoryVideoForm(video: Array<Blob>, victoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Victory>> {
            return CircleVictoriesApiFp(configuration).uploadVictoryVideoForm(video, victoryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CircleVictoriesApi - object-oriented interface
 * @export
 * @class CircleVictoriesApi
 * @extends {BaseAPI}
 */
export class CircleVictoriesApi extends BaseAPI {
    /**
     * 
     * @param {VictoryDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async addVictory(body: VictoryDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Victory>> {
        return CircleVictoriesApiFp(this.configuration).addVictory(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async deleteVictory(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Victory>> {
        return CircleVictoriesApiFp(this.configuration).deleteVictory(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async getAllVictories(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Victory>>> {
        return CircleVictoriesApiFp(this.configuration).getAllVictories(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get mobilizer victories
     * @param {string} mobilizerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async getMobilizerVictories(mobilizerId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Victory>>> {
        return CircleVictoriesApiFp(this.configuration).getMobilizerVictories(mobilizerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get My Victory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async getMyVictory(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Victory>>> {
        return CircleVictoriesApiFp(this.configuration).getMyVictory(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async getSupporterVictories(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Victory>>> {
        return CircleVictoriesApiFp(this.configuration).getSupporterVictories(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async getUserVictoriesBySubscription(id: string, date: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Victory>>> {
        return CircleVictoriesApiFp(this.configuration).getUserVictoriesBySubscription(id, date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async getVictoriesByCircleId(slug: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Victory>>> {
        return CircleVictoriesApiFp(this.configuration).getVictoriesByCircleId(slug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {string} mobilizerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async getVictoriesByMobilizerAndCircleId(id: string, mobilizerId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Victory>>> {
        return CircleVictoriesApiFp(this.configuration).getVictoriesByMobilizerAndCircleId(id, mobilizerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get user Victories
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async getVictoriesByUserName(username: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Victory>>> {
        return CircleVictoriesApiFp(this.configuration).getVictoriesByUserName(username, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} victory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async getVictoryById(victory: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Victory>> {
        return CircleVictoriesApiFp(this.configuration).getVictoryById(victory, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} victoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async pinVictory(victoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CircleVictoriesApiFp(this.configuration).pinVictory(victoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {VictoryDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async updateVictory(body: VictoryDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Victory>> {
        return CircleVictoriesApiFp(this.configuration).updateVictory(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Array<Blob>} files 
     * @param {string} victoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async uploadVictoryFilesForm(files: Array<Blob>, victoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Victory>> {
        return CircleVictoriesApiFp(this.configuration).uploadVictoryFilesForm(files, victoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Array<Blob>} video 
     * @param {string} victoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CircleVictoriesApi
     */
    public async uploadVictoryVideoForm(video: Array<Blob>, victoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Victory>> {
        return CircleVictoriesApiFp(this.configuration).uploadVictoryVideoForm(video, victoryId, options).then((request) => request(this.axios, this.basePath));
    }
}
