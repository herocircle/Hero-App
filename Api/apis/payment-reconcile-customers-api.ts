/* tslint:disable */
/* eslint-disable */
/**
 * hero-circle-api
 * The Hero Circle API description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * PaymentReconcileCustomersApi - axios parameter creator
 * @export
 */
export const PaymentReconcileCustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deduplicateSubscriptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reconcile-customers/deduplicate-subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} dryRun 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomers: async (dryRun: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dryRun' is not null or undefined
            if (dryRun === null || dryRun === undefined) {
                throw new RequiredError('dryRun','Required parameter dryRun was null or undefined when calling deleteCustomers.');
            }
            const localVarPath = `/reconcile-customers/delete-junk-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reconcile-customers/export-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} body 
         * @param {boolean} dryRun 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixPasswordHashes: async (body: Array<string>, dryRun: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fixPasswordHashes.');
            }
            // verify required parameter 'dryRun' is not null or undefined
            if (dryRun === null || dryRun === undefined) {
                throw new RequiredError('dryRun','Required parameter dryRun was null or undefined when calling fixPasswordHashes.');
            }
            const localVarPath = `/reconcile-customers/fix-password-hashes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} payingOnly 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDivergentDataPoints: async (payingOnly: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payingOnly' is not null or undefined
            if (payingOnly === null || payingOnly === undefined) {
                throw new RequiredError('payingOnly','Required parameter payingOnly was null or undefined when calling getDivergentDataPoints.');
            }
            const localVarPath = `/reconcile-customers/divergent-data-points`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (payingOnly !== undefined) {
                localVarQueryParameter['payingOnly'] = payingOnly;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeCustomersWithSubscriptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reconcile-customers/stripe-customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullInvoiceArrays: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reconcile-customers/pull-invoice-arrays`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} payingOnly 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullStripeSubscriptionData: async (payingOnly: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payingOnly' is not null or undefined
            if (payingOnly === null || payingOnly === undefined) {
                throw new RequiredError('payingOnly','Required parameter payingOnly was null or undefined when calling pullStripeSubscriptionData.');
            }
            const localVarPath = `/reconcile-customers/pull-stripe-subscription-data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (payingOnly !== undefined) {
                localVarQueryParameter['payingOnly'] = payingOnly;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reimportUsers: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling reimportUsers.');
            }
            const localVarPath = `/reconcile-customers/reimport-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLatestCardAsDefault: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reconcile-customers/set-latest-card-as-default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentReconcileCustomersApi - functional programming interface
 * @export
 */
export const PaymentReconcileCustomersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deduplicateSubscriptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentReconcileCustomersApiAxiosParamCreator(configuration).deduplicateSubscriptions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {boolean} dryRun 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomers(dryRun: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await PaymentReconcileCustomersApiAxiosParamCreator(configuration).deleteCustomers(dryRun, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await PaymentReconcileCustomersApiAxiosParamCreator(configuration).exportUsers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array<string>} body 
         * @param {boolean} dryRun 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixPasswordHashes(body: Array<string>, dryRun: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await PaymentReconcileCustomersApiAxiosParamCreator(configuration).fixPasswordHashes(body, dryRun, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {boolean} payingOnly 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDivergentDataPoints(payingOnly: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentReconcileCustomersApiAxiosParamCreator(configuration).getDivergentDataPoints(payingOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStripeCustomersWithSubscriptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentReconcileCustomersApiAxiosParamCreator(configuration).getStripeCustomersWithSubscriptions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullInvoiceArrays(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentReconcileCustomersApiAxiosParamCreator(configuration).pullInvoiceArrays(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {boolean} payingOnly 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullStripeSubscriptionData(payingOnly: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentReconcileCustomersApiAxiosParamCreator(configuration).pullStripeSubscriptionData(payingOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reimportUsers(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentReconcileCustomersApiAxiosParamCreator(configuration).reimportUsers(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setLatestCardAsDefault(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PaymentReconcileCustomersApiAxiosParamCreator(configuration).setLatestCardAsDefault(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PaymentReconcileCustomersApi - factory interface
 * @export
 */
export const PaymentReconcileCustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deduplicateSubscriptions(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentReconcileCustomersApiFp(configuration).deduplicateSubscriptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} dryRun 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomers(dryRun: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return PaymentReconcileCustomersApiFp(configuration).deleteCustomers(dryRun, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportUsers(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return PaymentReconcileCustomersApiFp(configuration).exportUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} body 
         * @param {boolean} dryRun 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixPasswordHashes(body: Array<string>, dryRun: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return PaymentReconcileCustomersApiFp(configuration).fixPasswordHashes(body, dryRun, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} payingOnly 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDivergentDataPoints(payingOnly: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentReconcileCustomersApiFp(configuration).getDivergentDataPoints(payingOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStripeCustomersWithSubscriptions(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentReconcileCustomersApiFp(configuration).getStripeCustomersWithSubscriptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullInvoiceArrays(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentReconcileCustomersApiFp(configuration).pullInvoiceArrays(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} payingOnly 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullStripeSubscriptionData(payingOnly: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentReconcileCustomersApiFp(configuration).pullStripeSubscriptionData(payingOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reimportUsers(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentReconcileCustomersApiFp(configuration).reimportUsers(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setLatestCardAsDefault(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PaymentReconcileCustomersApiFp(configuration).setLatestCardAsDefault(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentReconcileCustomersApi - object-oriented interface
 * @export
 * @class PaymentReconcileCustomersApi
 * @extends {BaseAPI}
 */
export class PaymentReconcileCustomersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentReconcileCustomersApi
     */
    public async deduplicateSubscriptions(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentReconcileCustomersApiFp(this.configuration).deduplicateSubscriptions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {boolean} dryRun 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentReconcileCustomersApi
     */
    public async deleteCustomers(dryRun: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return PaymentReconcileCustomersApiFp(this.configuration).deleteCustomers(dryRun, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentReconcileCustomersApi
     */
    public async exportUsers(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<any>>> {
        return PaymentReconcileCustomersApiFp(this.configuration).exportUsers(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Array<string>} body 
     * @param {boolean} dryRun 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentReconcileCustomersApi
     */
    public async fixPasswordHashes(body: Array<string>, dryRun: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return PaymentReconcileCustomersApiFp(this.configuration).fixPasswordHashes(body, dryRun, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {boolean} payingOnly 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentReconcileCustomersApi
     */
    public async getDivergentDataPoints(payingOnly: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentReconcileCustomersApiFp(this.configuration).getDivergentDataPoints(payingOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentReconcileCustomersApi
     */
    public async getStripeCustomersWithSubscriptions(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentReconcileCustomersApiFp(this.configuration).getStripeCustomersWithSubscriptions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentReconcileCustomersApi
     */
    public async pullInvoiceArrays(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentReconcileCustomersApiFp(this.configuration).pullInvoiceArrays(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {boolean} payingOnly 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentReconcileCustomersApi
     */
    public async pullStripeSubscriptionData(payingOnly: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentReconcileCustomersApiFp(this.configuration).pullStripeSubscriptionData(payingOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Array<string>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentReconcileCustomersApi
     */
    public async reimportUsers(body: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentReconcileCustomersApiFp(this.configuration).reimportUsers(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentReconcileCustomersApi
     */
    public async setLatestCardAsDefault(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PaymentReconcileCustomersApiFp(this.configuration).setLatestCardAsDefault(options).then((request) => request(this.axios, this.basePath));
    }
}
